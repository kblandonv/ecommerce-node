# Ecommerce API

Este repositorio contiene una API RESTful para una tienda en l√≠nea, desarrollada con Node.js, Express y Sequelize (PostgreSQL). Incluye autenticaci√≥n JWT, gesti√≥n de usuarios, productos y √≥rdenes de compra, tests automatizados, documentaci√≥n Swagger y configuraci√≥n Docker.

---

## Tabla de Contenidos

- [Ecommerce API](#ecommerce-api)
  - [Tabla de Contenidos](#tabla-de-contenidos)
  - [Descripci√≥n](#descripci√≥n)
  - [Caracter√≠sticas](#caracter√≠sticas)
  - [Tecnolog√≠as](#tecnolog√≠as)
  - [Requisitos Previos](#requisitos-previos)
  - [Instalaci√≥n y Configuraci√≥n](#instalaci√≥n-y-configuraci√≥n)
    - [Clonar el repositorio](#clonar-el-repositorio)
    - [Instalar dependencias](#instalar-dependencias)
    - [Variables de entorno](#variables-de-entorno)
  - [Ejecuci√≥n Local](#ejecuci√≥n-local)
  - [Seed de Datos](#seed-de-datos)
  - [Tests](#tests)
  - [Docker \& Docker Compose](#docker--docker-compose)
  - [Documentaci√≥n con Swagger](#documentaci√≥n-con-swagger)
  - [Despliegue](#despliegue)
  - [Licencia](#licencia)
  - [Contacto](#contacto)

---

## Descripci√≥n

Esta API permite:

* Registrar usuarios y autenticarse con JWT.
* Consultar el perfil del usuario autenticado.
* Listar y consultar productos.
* Crear y listar √≥rdenes de compra, calculando el total autom√°ticamente.

Adem√°s incluye:

* Tests unitarios e integraci√≥n con Jest y Supertest.
* Generaci√≥n de datos de ejemplo (seed).
* Containerizaci√≥n con Docker y Docker Compose.
* Documentaci√≥n interactiva con Swagger UI.

---

## Caracter√≠sticas

* **Autenticaci√≥n**: registro e inicio de sesi√≥n con JWT.
* **Usuarios**: endpoint protegido `/me` para obtener datos.
* **Productos**: CRUD (solo lectura p√∫blica).
* **√ìrdenes**: creaci√≥n y listado de √≥rdenes protegidas.
* **Tests**: cobertura m√≠nima del 80%, simulaci√≥n de errores.
* **Docker**: servicios de la API y PostgreSQL orquestados.
* **Swagger**: documentaci√≥n y prueba en `/docs`.

---

## Tecnolog√≠as

* **Node.js** 18
* **Express**
* **Sequelize** (PostgreSQL)
* **JWT** (jsonwebtoken)
* **bcryptjs**
* **Jest** + **Supertest**
* **Swagger (OpenAPI)**
* **Docker** + **Docker Compose**

---

## Requisitos Previos

* [Node.js](https://nodejs.org/) v16 o superior
* [npm](https://www.npmjs.com/) o [yarn](https://yarnpkg.com/)
* [PostgreSQL](https://www.postgresql.org/) (para ejecuci√≥n local)
* [Docker](https://www.docker.com/)
* [Docker Compose](https://docs.docker.com/compose/)

---

## Instalaci√≥n y Configuraci√≥n

### Clonar el repositorio

```bash
git clone https://github.com/<kblandonv>/ecommerce-node.git
cd ecommerce-node
```

### Instalar dependencias

```bash
npm install
```

### Variables de entorno

Crea un archivo `.env` en la ra√≠z con las siguientes variables (usa tus propios valores, no los del ejemplo):

```dotenv
PORT=3000

# PostgreSQL
POSTGRES_USER=<tu_usuario_postgres>
POSTGRES_PASSWORD=<tu_contrase√±a_postgres>
POSTGRES_DB=<tu_base_de_datos>
POSTGRES_HOST=localhost

# URL de conexi√≥n Sequelize
db_url_construido_o_usar_directamente_DB_URL
DB_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}

# Secreto para JWT
JWT_SECRET=<tu_valor_aleatorio_para_JWT>
```

\$1CREATE ROLE \<tu\_usuario\_postgres> WITH LOGIN PASSWORD '\<tu\_contrase√±a\_postgres>';
CREATE DATABASE \<tu\_base\_de\_datos> OWNER \<tu\_usuario\_postgres>;
\$3

---

## Ejecuci√≥n Local

Levanta la API en modo desarrollo:

```bash
npm run dev
```

* La API estar√° en `http://localhost:3000`.
* Ruta de prueba: `GET /` ‚Üí `üöÄ API corriendo`.

---

## Seed de Datos

Para poblar productos de ejemplo:

```bash
npm run seed
```

Esto insertar√° productos predefinidos si a√∫n no existen.

---

## Tests

Ejecuta la suite de pruebas y genera cobertura:

```bash
npm test
```

* Tests de Auth, Products y Orders.
* Cobertura m√≠nima establecida en 80%.

---

## Docker & Docker Compose

Levanta todo con Docker:

```bash
docker-compose build
docker-compose up -d
```

* **app** expuesta en `localhost:3001` (o el puerto que definas).
* **db** expuesta en `localhost:5432`.

Para sembrar datos dentro del contenedor:

```bash
docker-compose exec app npm run seed
```

---

## Documentaci√≥n con Swagger

Una vez la API est√© en marcha, abre:

```
http://localhost:3000/docs
```

Podr√°s ver y probar todos los endpoints de forma interactiva.

---

## Despliegue

Se recomienda desplegar en plataformas como Railway o Render:

1. Sube el c√≥digo a GitHub.
2. Conecta el repositorio en Railway.
3. Define variables de entorno en el panel de tu servicio.
4. Railway se encargar√° de build y deploy autom√°ticos.

---

## Licencia

Este proyecto est√° bajo la licencia MIT. V√©ase [LICENSE](LICENSE) para m√°s detalles.

---

## Contacto

Para dudas o sugerencias, cont√°cteme a via email: [kblandonv@unal.edu.co](mailto:kblandonv@unal.edu.co)
